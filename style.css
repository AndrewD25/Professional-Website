/*
Andrew Deal
HTML/CSS Capstone Project
August 31, 2023
*/

:root { 
    /*--myBlue: #0ec0e4;*/
    --myBlue: #0e9ccf;
    
    /*Define left and right values for each element here*/
    /*This makes changing them easier because it applies to original position + animations*/
    --greetingTop: clamp(1vh, 10vw, 20vh);
    --greetingLeft: 5vw;
    --nameTop: clamp(1vh, 15vw, 30vh);
    --nameLeft: 5vw;
    --introTop: clamp(1vh, 27vw, 54vh);
    --introLeft: 5vw;
    --instructionsTop: clamp(1vh, 32.5vw, 65vh);
    --instructionsLeft: 5vw;
    
    --aboutMeTitleTop: clamp(1vh, 5vw, 10vh);
    --aboutMeTitleLeft: 43vw;
    --aboutMeParagraphTop: clamp(1vh, 12vw, 24vh);
    --aboutMeParagraphLeft: 43vw; 
    --meTop: 0px;
    --meLeft: 0px; 

    --projectsTitleTop: clamp(1vh, 4vw, 8vh);
    --projectsTitleLeft: 0vw;
    --projectsGalleryTop: clamp(1vh, 18vw, 32vh);
    --projectsGalleryLeft: 0px;

    --experienceTitleTop: clamp(1vh, 5vw, 10vh);
    --experienceTitleLeft: 5vw;
    --experienceDescriptionTop: clamp(1vh, 14vw, 27vh);
    --experienceDescriptionLeft: 5vw;
    --myResumeTop: clamp(1vh, 5vw, 10vh);
    --myResumeLeft: 63vw; 

    --contactTitleTop: clamp(1vh, 5vw, 10vh);
    --contactTitleLeft: 0vw;
    --contactBoxTop: clamp(1vh, 13.5vw, 27vh);
    --contactBoxLeft: 15vw;

    /*Hide scrollbars*/
    scrollbar-width: none;
}

body {
    /*background-color: #f0f8ff;*/
    background: url("Images/backgroundSlower.gif");
    background-repeat: no-repeat;
    background-attachment: fixed;
    background-size: cover;

    margin: 0;
    height: 99vh;

    /*Overflow handling stops vertical scrolling but allows horizontal which helps on projects page*/
    overflow-x: auto;
    overflow-y: hidden;

    /*Backup scrollbar hiding just to make sure it doesn't show up on any browser */
    -ms-overflow-style: none;  /* IE and Edge */
    scrollbar-width: none;  /* Firefox */
}

/*Backup scrollbar hiding just to make sure it doesn't show up on any browser */
body::-webkit-scrollbar {
    display: none; /* Chrome, Safari and Opera */
}


h1, h2, h3 {
    margin: 0;
}

/*Many elements from this point on have a "set position" property. These elements are the 
    elements and containers that are moved by the animations. Each "set position" element
        has its position to fixed and its top and left set to predefined root variables 
            (the top and left of its position once opened) */

#greeting { 
    font-size: clamp(1px, 5vw, 10vh);

    /*Set position*/
    position: fixed;
    top: var(--greetingTop);
    left: var(--greetingLeft);
    white-space: nowrap; 
}

#name {
    font-family: monospace serif;
    font-size: clamp(1px, 11vw, 22vh);
    color: rgba(0, 0, 0, 0); /* Text is fully transparent */
    -webkit-text-stroke: 0.1vw black; /* Outline width and color */
    -webkit-text-fill-color: transparent;
    font-weight: bold;

    /*Setup for ".fancy" background moving animation*/
    background: linear-gradient(
        to right,
        var(--myBlue),
        var(--myBlue),
        var(--myBlue),
        var(--myBlue),
        rgb(226, 87, 145),
        rgb(226, 87, 145),
        var(--myBlue)
    );
    background-size: 200%;
    background-clip: auto; /*Unnecessary but gets rid of yellow squiggly line*/
    -webkit-background-clip: text;
    white-space: nowrap;

    /*Set position*/
    position: fixed;
    top: var(--nameTop);
    left: var(--nameLeft);
}

/* For future mobile sizing
@media only screen and (max-width: 400px) {
    #name {
        color: var(--myBlue);
        -webkit-text-stroke: 1px black; /* Outline width and color 
        font-size: 15vw;
        left: 0px;
        width: 100%;
        text-align: center;
    }
}*/

/*An animation for the h1 on the home page that is currently unused*/
/*.fancy {
    
    background-clip: auto; /*Unnecessary but gets rid of yellow squiggly line
    -webkit-background-clip: text;
    white-space: nowrap;
}

@keyframes background-pan { /*Also has to keep it at its position
    from {
        background-position: -200% center;
        top: var(--nameTop);
        left: var(--nameLeft);
        transform: scale(1);
    }

    to {
        background-position: 0% center;
        top: var(--nameTop);
        left: var(--nameLeft);
        transform: scale(1);
    }
}
*/

#intro {
    font-size: clamp(1px, 3vw, 6vh);
    padding-bottom: 1vw;
    border-bottom: clamp(0.1vh, 0.4vw, 0.6vh) solid var(--myBlue);

    /*Set position*/
    position: fixed;
    top: var(--introTop);
    left: var(--introLeft);
    white-space: nowrap; 
}

#instructions {
    font-size: clamp(1px, 3vw, 6vh);
    white-space: nowrap; 

    /*set position*/
    position: fixed;
    top: var(--instructionsTop);
    left: var(--instructionsLeft);
}

.blueText { /*Used in a span to give the double-click instruction text a similar styling 
                as the main headings on each page to help with accessibility/visibilty */
    color: rgba(0, 0, 0, 0); 
    -webkit-text-stroke: 0.1vw black; 
    background-clip: auto;
    -webkit-background-clip: text;
    font-weight: bold;
    background-color: var(--myBlue);
    white-space: nowrap; 
}

#aboutMeTitle {
    color: rgba(0, 0, 0, 0);
    -webkit-text-stroke: 0.1vw black; /* Outline width and color */
    background-clip: auto;
    -webkit-background-clip: text;
    font-weight: bold;
    background-color: var(--myBlue); /*Change text color*/
    font-size: clamp(1px, 8vw, 16vh);
    white-space: nowrap; 

    /*set position*/
    position: fixed;
    top: var(--aboutMeTitleTop);
    left: var(--aboutMeTitleLeft);
    transform: scale(0);
}

#aboutMeParagraph {
    font-size: clamp(1px, 1.75vw, 3.5vh);
    max-height: 60vh;
    width: clamp(1vw, 55vw, 120vh);
    padding-right: 5vw;
    
    /*set position*/
    position: fixed;
    top: var(--aboutMeParagraphTop);
    left: var(--aboutMeParagraphLeft);
    transform: scale(0);
}

/*When screen gets to a weird aspect ratio (too short), about me paragraph is resized*/
@media (max-height: 250px), (min-aspect-ratio: 2/1) {
    #aboutMeParagraph {
        width: clamp(1vw, 45vw, 95vh);
        max-height: 70vh;
    }
}

#me {
    width: clamp(1vw, 40vw, 75vh);
    /*max-height: 60vh; Commented out unitl I figure out a responsive height/sizing */
    aspect-ratio: auto;

    /*set position*/
    position: fixed;
    top: var(--meTop);
    left: var(--meLeft);
    transform: scale(0);
    z-index: -9999999999999;
}

/*When screen gets to a weird aspect ratio (too short), make sure my img is full height*/
@media (max-height: 250px), (min-aspect-ratio: 2/1) {
    #me {
        height: 100vh;
        width: auto;
        aspect-ratio: auto;
    }
}

#projectsTitle {
    color: rgba(0, 0, 0, 0);
    -webkit-text-stroke: 0.1vw black; /* Outline width and color */
    background-clip: auto;
    -webkit-background-clip: text;
    font-weight: bold;
    background-color: var(--myBlue); /*Change text color*/
    font-size: clamp(1px, 8vw, 16vh);
    white-space: nowrap; 
    width: 100vw;
    text-align: center;

    /*set position*/
    position: fixed;
    top: var(--projectsTitleTop);
    left: var(--projectsTitleLeft);
    transform: scale(0);
}

#projectsGallery {
    /*background-color: rgb(112, 112, 112); unused styling for gallery, was too bold and loud
    border-block: 5px solid var(--myBlue);*/
    display: flex;
    align-items: center;
    min-width: 100%;

    /*set position*/
    position: absolute;
    top: var(--projectsGalleryTop);
    left: var(--projectsGalleryLeft);
    transform: scale(0);
}

/*When screen gets to a weird aspect ratio (too short), gallery gets extra padding*/
@media (max-height: 250px), (min-aspect-ratio: 2/1) {
    /*Add extra padding to make right side of projects gallery visible*/
    #projectsGallery {
        padding-right: 10vw;
    }
}

.gallery {
    border: 0.1vw solid #333;
    float: left;
    width: clamp(1vh, 45vw, 70vh);
    margin: 1vw;
}
  
.gallery img {
    width: 100%; /*Imgs inside gallery are sized based on the gallery element sizing*/
    aspect-ratio: 16 / 9;
    display: block;
}
  
.desc {
    border-top: 0.1vw solid #333;
    padding-inline: 2vw;
    text-align: center;
    background-color: #DDD;
    display: flex;
    justify-content: space-between;
    align-items: center;
}

.desc p {
    display: inline-block; /*in order to be inline with the tags*/
    width: fit-content;
    font-size: clamp(1px, 1.25vw, 2.5vh);
}

.tags {
    display: flex;
    gap: 0.5vw;
}

.tag {
    color: white;
    border: 0.1vw solid black;
    border-radius: 0.5vw; /*Tags get rounded corners*/
    padding: clamp(1px, 0.3vw, 0.6vh);
    font-size: clamp(1px, 1vw, 2vh) !important;
}

/*Each tag has a different color, represented by classes*/
.html {
    background-color: rgb(255, 94, 0);
}

.css {
    background-color: rgb(0, 183, 255);
}

.js {
    background-color: rgb(207, 1, 207);
}

.python {
    background-color: rgb(4, 99, 0);
}
/*           End of Tag Coloring section             */

#experienceTitle {
    color: rgba(0, 0, 0, 0);
    -webkit-text-stroke: 0.1vw black; /* Outline width and color */
    background-clip: auto;
    -webkit-background-clip: text;
    font-weight: bold;
    background-color: var(--myBlue); /*Change text color*/
    font-size: clamp(1px, 8vw, 16vh);
    white-space: nowrap; 

    /*set position*/
    position: fixed;
    top: var(--experienceTitleTop);
    left: var(--experienceTitleLeft);
    transform: scale(0);
}

#experienceDescription {
    font-size: clamp(1px, 1.4vw, 2.8vh);

    /*set position*/
    position: fixed;
    top: var(--experienceDescriptionTop);
    left: var(--experienceDescriptionLeft);
    transform: scale(0);
}

#experienceDescription p {
    font-weight: bolder;
    text-decoration: underline;
    /*Gives the paragraph elements (the section titles, in this container) extra weight and style*/
}

#experienceDescription li::marker {
    /*Sets bullet points to symbols using Font Awesome*/
    color: var(--myBlue);
    content: '✧';
    margin-right: 0.1vw;
}

#myResume {
    text-align: right;

    /*set position*/
    position: fixed;
    top: var(--myResumeTop);
    left: var(--myResumeLeft);
    transform: scale(0);
}

/*When screen gets to a weird aspect ratio (too short), move resume a little bit away from right side*/
@media (max-height: 250px), (min-aspect-ratio: 2/1) {
    :root {
        --myResumeLeft: 58vw;
    }
}

#resumeImg {
    width: clamp(1vh, 28vw, 54vh);
    /*max-height: 60vh; Commented out until I fix this height calculation for responsiveness*/
    aspect-ratio: auto;
}

#myResume a {
    font-size: clamp(1px, 1.25vw, 2.5vh);
}

#contactTitle {
    color: rgba(0, 0, 0, 0); 
    -webkit-text-stroke: 0.1vw black; /* Outline width and color */
    background-clip: auto;
    -webkit-background-clip: text;
    font-weight: bold;
    background-color: var(--myBlue); /*Change text color*/
    font-size: clamp(1px, 7vw, 14vh);
    white-space: nowrap; 
    width: 100vw;
    text-align: center;

    /*set position*/
    position: fixed;
    top: var(--contactTitleTop);
    left: var(--contactTitleLeft);
    transform: scale(0);
}

#contactBox {
    border: 0.1vw solid black;
    /*border-bottom: none;*/
    width: 70vw;
    height: clamp(1vw, 45vh, 25vw);
    border-radius: 1vw;
    display: flex;
    padding: 1vw;
    background-color: white;

    /*set position*/
    position: fixed;
    top: var(--contactBoxTop);
    left: var(--contactBoxLeft);
    transform: scale(0);
}

/*When screen gets to a weird aspect ratio (too short) and folders move to right side*/
@media (max-height: 250px), (min-aspect-ratio: 2/1) {
    :root {
        --contactTitleLeft: -6vw;
        --contactBoxLeft: 9vw;
    }
}

#contactLeftSide {
    width: 50%;
    display: inline-block;
    border-right: 0.1vw solid black;
    padding-right: 1vw;
}

#contactBox h2 {
    font-size: clamp(1px, 2.5vw, 5vh);
}

#contactBox form {
    display: flex;
    flex-direction: column;
    align-items: center;
    gap: 0.25vw;
}

#nameInput, #emailInput {
    display: block;
    width: 90%;
    border: none;
    border-bottom: 0.1vw solid black;
    color: black;
    font-family: 'Courier New', Courier, monospace;
    font-size: clamp(1px, 1.5vw, 3vh);
}

#messageInput {
    display: block;
    width: 90%;
    height: clamp(1vw, 22vh, 11vw);
    border: none;
    border-bottom: 0.1vw solid black;
    resize: none; /*I decided it was best not to allow any resizing of the message input, sacrificing a small amount of functionality for a more optimal visual*/
    font-family: 'Courier New', Courier, monospace;
    font-size: clamp(1px, 1.5vw, 3vh);
}

#submitContactForm {
    margin-top: clamp(0.1vw, 0.3vh, 0.15vw);
    padding: clamp(1vh, 1vw, 2vh);
    background-color: var(--myBlue);
    border: none;
    border-radius: 1vw;
    width: 10vw;
    font-size: clamp(1px, 1.5vw, 3vh);
}

#contactRightSide {
    width: 50%;
    display: inline-block;
    padding-left: 1vw;
}

#contactsFlex {
    display: flex;
    flex-direction: column;
}

.contactInfoDiv {
    display: flex;
    align-items: center;
    margin-block: clamp(1vh, 1.5vw, 3vh);
}

.contactInfoDiv img { /*The images that are almost like bullet points - social media logos*/
    width: clamp(1vh, 4vw, 8vh);
    height: clamp(1vh, 4vw, 8vh);
    display: inline-block;
    margin-right: 1vw;
}

.contactInfoDiv p, .contactInfoDiv a { /*For the contact info I have linked, also styles p elements just in case I want one without a link*/
    margin: 0;
    font-size: clamp(1px, 2vw, 4vh);
    text-align: left;
    display: inline-block;
}

.contactInfoDiv a {
    color: var(--myBlue);
}


/*--------ANIMATIONS--------/
This section gets pretty repetitive, so there
are comments explaining the first shrink and 
grow animations, but the rest follow the 
exact same pattern        */


@keyframes shrinkAndMoveGreeting {
    from {
        top: var(--greetingTop); /*Start position when open*/
        left: var(--greetingLeft); /*Start position when open*/
        transform: scale(1); /*Start at 100% scale*/
        transform-origin: center; /*Uses a changing transform origin because without it, the animation is not as smooth*/
    }
    to {
        top: calc(var(--homeFolderY) - var(--greetingHeight)); /*Centers the height against the (center) Y of the folder*/
        left: calc(var(--homeFolderX) - var(--greetingWidth)); /*Centers the width against the (center) X of the folder*/
        transform: scale(0); /*Shrink to 0% scale*/
        transform-origin: center; 
    }
}

@keyframes growAndMoveGreeting {
    from {
        top: calc(var(--homeFolderY) - var(--greetingHeight)); /*Start centered vertically and...*/
        left: calc(var(--homeFolderX) - var(--greetingWidth)); /*...horizontally on the folder*/
        transform: scale(0); /*Starts at 0% scale*/
        transform-origin: top left; /*Note that shrinking and growing each have a transform origin that looks nicer for that animation,
                                        center and top left respectively*/
    }
    to {
        top: var(--greetingTop); /*move to the set position saved in the root variables*/
        left: var(--greetingLeft); /*move to the set position saved in the root variables*/
        transform: scale(1); /*Grow to full scale*/
        transform-origin: top left;
    }
}

@keyframes shrinkAndMoveName {
    from {
        top: var(--nameTop);
        left: var(--nameLeft);
        transform: scale(1);
        transform-origin: center;
    }
    to {
        top: calc(var(--homeFolderY) - var(--myNameHeight));
        left: calc(var(--homeFolderX) - var(--myNameWidth));
        transform: scale(0);
        transform-origin: center;
    }
}

@keyframes growAndMoveName {
    from {
        top: calc(var(--homeFolderY) - var(--myNameHeight));
        left: calc(var(--homeFolderX) - var(--myNameWidth)); 
        transform: scale(0);
        transform-origin: top left;
    }
    to {
        top: var(--nameTop);
        left: var(--nameLeft);
        transform: scale(1);
        transform-origin: top left;
    }
}

@keyframes shrinkAndMoveIntro {
    from {
        top: var(--introTop);
        left: var(--introLeft);
        transform: scale(1);
        transform-origin: center;
    }
    to {
        top: calc(var(--homeFolderY) - var(--introHeight));
        left: calc(var(--homeFolderX) - var(--introWidth));
        transform: scale(0);
        transform-origin: center;
    }
}

@keyframes growAndMoveIntro {
    from {
        top: calc(var(--homeFolderY) - var(--introHeight));
        left: calc(var(--homeFolderX) - var(--introWidth));
        transform: scale(0);
        transform-origin: top left;
    }
    to {
        top: var(--introTop);
        left: var(--introLeft);
        transform: scale(1);
        transform-origin: top left;
    }
}

@keyframes shrinkAndMoveInstructions {
    from {
        top: var(--instructionsTop);
        left: var(--instructionsLeft);
        transform: scale(1);
        transform-origin: center;
    }
    to {
        top: calc(var(--homeFolderY) - var(--instructionsHeight));
        left: calc(var(--homeFolderX) - var(--instructionsWidth));
        transform: scale(0);
        transform-origin: center;
    }
}

@keyframes growAndMoveInstructions {
    from {
        top: calc(var(--homeFolderY) - var(--instructionsHeight));
        left: calc(var(--homeFolderX) - var(--instructionsWidth));
        transform: scale(0);
        transform-origin: top left;
    }
    to {
        top: var(--instructionsTop);
        left: var(--instructionsLeft);
        transform: scale(1);
        transform-origin: top left;
    }
}

@keyframes shrinkAndMoveAboutMeTitle {
    from {
        top: var(--aboutMeTitleTop);
        left: var(--aboutMeTitleLeft);
        transform: scale(1);
        transform-origin: center;
    }
    to {
        top: calc(var(--aboutMeFolderY) - var(--aboutMeTitleHeight));
        left: calc(var(--aboutMeFolderX) - var(--aboutMeTitleWidth));
        transform: scale(0);
        transform-origin: center;
    }
}

@keyframes growAndMoveAboutMeTitle {
    from {
        top: calc(var(--aboutMeFolderY) - var(--aboutMeTitleHeight));
        left: calc(var(--aboutMeFolderX) - var(--aboutMeTitleWidth));
        transform: scale(0);
        transform-origin: top left;
    }
    to {
        top: var(--aboutMeTitleTop);
        left: var(--aboutMeTitleLeft);
        transform: scale(1);
        transform-origin: top left;
    }
}

@keyframes shrinkAndMoveAboutMeParagraph {
    from {
        top: var(--aboutMeParagraphTop);
        left: var(--aboutMeParagraphLeft);
        transform: scale(1);
        transform-origin: center;
    }
    to {
        top: calc(var(--aboutMeFolderY) - var(--aboutMeParagraphHeight));
        left: calc(var(--aboutMeFolderX) - var(--aboutMeParagraphWidth));
        transform: scale(0);
        transform-origin: center;
    }
}

@keyframes growAndMoveAboutMeParagraph {
    from {
        top: calc(var(--aboutMeFolderY) - var(--aboutMeParagraphHeight));
        left: calc(var(--aboutMeFolderX) - var(--aboutMeParagraphWidth));
        transform: scale(0);
        transform-origin: top left;
    }
    to {
        top: var(--aboutMeParagraphTop);
        left: var(--aboutMeParagraphLeft);
        transform: scale(1);
        transform-origin: top left;
    }
}

@keyframes shrinkAndMoveMe {
    from {
        top: var(--meTop);
        left: var(--meLeft);
        transform: scale(1);
        transform-origin: center;
    }
    to {
        top: calc(var(--aboutMeFolderY) - var(--meHeight));
        left: calc(var(--aboutMeFolderX) - var(--meWidth));
        transform: scale(0);
        transform-origin: center;
    }
}

@keyframes growAndMoveMe {
    from {
        top: calc(var(--aboutMeFolderY) - var(--meHeight));
        left: calc(var(--aboutMeFolderX) - var(--meWidth));
        transform: scale(0);
        transform-origin: top left;
    }
    to {
        top: var(--meTop);
        left: var(--meLeft);
        transform: scale(1);
        transform-origin: top left;
    }
}

@keyframes shrinkAndMoveProjectsTitle {
    from {
        top: var(--projectsTitleTop);
        left: var(--projectsTitleLeft);
        transform: scale(1);
        transform-origin: center;
    }
    to {
        top: calc(var(--projectsFolderY) - var(--projectsTitleHeight));
        left: calc(var(--projectsFolderX) - var(--projectsTitleWidth));
        transform: scale(0);
        transform-origin: center;
    }
}

@keyframes growAndMoveProjectsTitle {
    from {
        top: calc(var(--projectsFolderY) - var(--projectsTitleHeight));
        left: calc(var(--projectsFolderX) - var(--projectsTitleWidth));
        transform: scale(0);
        transform-origin: top left;
    }
    to {
        top: var(--projectsTitleTop);
        left: var(--projectsTitleLeft);
        transform: scale(1);
        transform-origin: top left;
    }
}

@keyframes shrinkAndMoveProjectsGallery {
    from {
        top: var(--projectsGalleryTop);
        left: var(--projectsGalleryLeft);
        transform: scale(1);
        transform-origin: center;
    }
    to {
        top: calc(var(--projectsFolderY) - var(--projectsGalleryHeight));
        left: calc(var(--projectsFolderX) - var(--projectsGalleryWidth));
        transform: scale(0);
        transform-origin: center;
    }
}

@keyframes growAndMoveProjectsGallery {
    from {
        top: calc(var(--projectsFolderY) - var(--projectsGalleryHeight));
        left: calc(var(--projectsFolderX) - var(--projectsGalleryWidth));
        transform: scale(0);
        transform-origin: top left;
    }
    to {
        top: var(--projectsGalleryTop);
        left: var(--projectsGalleryLeft);
        transform: scale(1);
        transform-origin: top left;
    }
}

@keyframes shrinkAndMoveExperienceTitle {
    from {
        top: var(--experienceTitleTop);
        left: var(--experienceTitleLeft);
        transform: scale(1);
        transform-origin: center;
    }
    to {
        top: calc(var(--experienceFolderY) - var(--experienceTitleHeight));
        left: calc(var(--experienceFolderX) - var(--experienceTitleWidth));
        transform: scale(0);
        transform-origin: center;
    }
}

@keyframes growAndMoveExperienceTitle {
    from {
        top: calc(var(--experienceFolderY) - var(--experienceTitleHeight));
        left: calc(var(--experienceFolderX) - var(--experienceTitleWidth));
        transform: scale(0);
        transform-origin: top left;
    }
    to {
        top: var(--experienceTitleTop);
        left: var(--experienceTitleLeft);
        transform: scale(1);
        transform-origin: top left;
    }
}

@keyframes shrinkAndMoveExperienceDescription {
    from {
        top: var(--experienceDescriptionTop);
        left: var(--experienceDescriptionLeft);
        transform: scale(1);
        transform-origin: center;
    }
    to {
        top: calc(var(--experienceFolderY) - var(--experienceDescriptionHeight));
        left: calc(var(--experienceFolderX) - var(--experienceDescriptionWidth));
        transform: scale(0);
        transform-origin: center;
    }
}

@keyframes growAndMoveExperienceDescription {
    from {
        top: calc(var(--experienceFolderY) - var(--experienceDescriptionHeight));
        left: calc(var(--experienceFolderX) - var(--experienceDescriptionWidth));
        transform: scale(0);
        transform-origin: top left;
    }
    to {
        top: var(--experienceDescriptionTop);
        left: var(--experienceDescriptionLeft);
        transform: scale(1);
        transform-origin: top left;
    }
}

@keyframes shrinkAndMoveMyResume {
    from {
        top: var(--myResumeTop);
        left: var(--myResumeLeft);
        transform: scale(1);
        transform-origin: center;
    }
    to {
        top: calc(var(--experienceFolderY) - var(--myResumeHeight));
        left: calc(var(--experienceFolderX) - var(--myResumeWidth));
        transform: scale(0);
        transform-origin: center;
    }
}

@keyframes growAndMoveMyResume {
    from {
        top: calc(var(--experienceFolderY) - var(--myResumeHeight));
        left: calc(var(--experienceFolderX) - var(--myResumeWidth));
        transform: scale(0);
        transform-origin: top left;
    }
    to {
        top: var(--myResumeTop);
        left: var(--myResumeLeft);
        transform: scale(1);
        transform-origin: top left;
    }
}

@keyframes shrinkAndMoveContactTitle {
    from {
        top: var(--contactTitleTop);
        left: var(--contactTitleLeft);
        transform: scale(1);
        transform-origin: center;
    }
    to {
        top: calc(var(--contactFolderY) - var(--contactTitleHeight));
        left: calc(var(--contactFolderX) - var(--contactTitleWidth));
        transform: scale(0);
        transform-origin: center;
    }
}

@keyframes growAndMoveContactTitle {
    from {
        top: calc(var(--contactFolderY) - var(--contactTitleHeight));
        left: calc(var(--contactFolderX) - var(--contactTitleWidth));
        transform: scale(0);
        transform-origin: top left;
    }
    to {
        top: var(--contactTitleTop);
        left: var(--contactTitleLeft);
        transform: scale(1);
        transform-origin: top left;
    }
}

@keyframes shrinkAndMoveContactBox {
    from {
        top: var(--contactBoxTop);
        left: var(--contactBoxLeft);
        transform: scale(1);
        transform-origin: center;
    }
    to {
        top: calc(var(--contactFolderY) - var(--contactBoxHeight));
        left: calc(var(--contactFolderX) - var(--contactBoxWidth));
        transform: scale(0);
        transform-origin: center;
    }
}

@keyframes growAndMoveContactBox {
    from {
        top: calc(var(--contactFolderY) - var(--contactBoxHeight));
        left: calc(var(--contactFolderX) - var(--contactBoxWidth));
        transform: scale(0);
        transform-origin: top left;
    }
    to {
        top: var(--contactBoxTop);
        left: var(--contactBoxLeft);
        transform: scale(1);
        transform-origin: top left;
    }
}
/*------END OF ANIMATIONS SECTION-----------*/


/*Styling for folder container at the bottom*/
#folderContainer {
    position: fixed;
    bottom: 0;
    width: 100vw;
    display: flex;
    justify-content: space-around;
    border-radius: 2vw 2vw 0 0; /*round top corners*/
    
    cursor: auto !important;
    background-color: var(--myBlue);
}

/*When screen gets to a weird aspect ratio (too short), move folders to right side*/
@media (max-height: 250px), (min-aspect-ratio: 2/1) {
    #folderContainer {
        position: fixed;
        display: flex;
        top: 0;
        right: 0;
        bottom: auto;
        flex-direction: column;
        width: auto;
        height: 100vh;
        border-radius: 2vw 0 0 2vw; /*round left side corners*/
    }

    .folder {
        width: clamp(1vh, 5vw, 10vh) !important;
    }
}

.folderBox {
    text-align: center;
    padding: 0.2vw 0.6vw 0.6vw 0.2vw;
    z-index: 999;
}

.folder {
    width: clamp(10px, 5vw, 60px);
    aspect-ratio: 1/1;
}

#folderContainer p {
    margin-block: 0;
    font-size: clamp(0.5vh, 1.5vw, 3vh);
    pointer-events: none;
}